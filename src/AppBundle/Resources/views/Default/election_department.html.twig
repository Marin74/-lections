{% extends 'base.html.twig' %}

{% block title %}
	{% if election is not null and department is not null %}
        {{ "election_department"|trans({"%election%": election.name, "%department%": department.name}) }}
    {% else %}
	    {{ parent() }}
    {% endif %}
{% endblock %}

{% block body %}
<div class="container">
	<ol class="breadcrumb">
		<li><a href="{{ url("app_elections") }}">{{ "elections"|trans }}</a></li>
		{% if election is null %}
			<li class="active">{{ "unknown_election"|trans }}</li>
		{% elseif department is null %}
    		<li><a href="{{ url("app_election", {"id": election.id, "name": election.urlName}) }}">{{ election.name }}</a></li>
			<li class="active">{{ "unknown_department"|trans }}</li>
		{% else %}
    		<li><a href="{{ url("app_election", {"id": election.id, "name": election.urlName}) }}">{{ election.name }}</a></li>
    		<li class="active">{{ department.name }}</li>
		{% endif %}
	</ol>
	
	{% if previousElection is not null or nextElection is not null %}
		<nav aria-label="">
			<ul class="pager">
				{% if previousElection is not null %}
					<li class="previous"><a href="{{ url("app_election_department", {"election_id": previousElection.id, "department_id": department.id, "name": previousElection.urlName~"-"~department.urlName}) }}"><span aria-hidden="true">&larr;</span> {{ previousElection.name }}</a></li>
				{% endif %}
				{% if nextElection is not null %}
					<li class="next"><a href="{{ url("app_election_department", {"election_id": nextElection.id, "department_id": department.id, "name": nextElection.urlName~"-"~department.urlName}) }}">{{ nextElection.name }} <span aria-hidden="true">&rarr;</span></a></li>
				{% endif %}
			</ul>
		</nav>
	{% endif %}
	
	{% if department is null %}
		<h3>{{ "unknown_department"|trans }}</h3>
	{% elseif election is null %}
		<h3>{{ department.name }}</h3>
		<p>{{ "unknown_election"|trans }}</p>
	{% else %}
		<h3>{{ "election_department"|trans({"%election%": election.name, "%department%": department.name}) }}</h3>
		
		{% if election.rounds|length > 0 and resultsCity|length > 0 %}
    		<p>
        		<center>
        			<div class="btn-group" role="group" aria-label="">
        				{% for round in election.rounds %}
    						<a type="button" class="btn btn-default {% if resultsCity|length > 0 and resultsCity[0].round.id == round.id %}active{% endif %}" href="{{ url("app_election_department", {"election_id": election.id, "department_id": department.id, "name": election.urlName~"-"~department.urlName, "roundNumber": round.roundNumber}) }}">{{ ("round_"~round.roundNumber)|trans }}</a>
    					{% endfor %}
    				</div>
        		</center>
    		</p>
			
			<div id="mapid" style="height: 300px; margin: 0 auto"></div>
		{% endif %}
		
		{% for result in results %}
			<hr>
			<div class="row">
        		<div class="col-md-6">
        			
        			<h4>{{ ("round_"~result.round.roundNumber)|trans }}</h4>
        			
        			{% if result is not null %}
            			<table class="table table-striped">
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>{{ "number"|trans }}</th>
                                </tr>
                            </thead>
                            <tbody>
                            	{% if result.registered is not null %}
                            		<tr>
                            			<td>{{ "registered"|trans }}</td>
                            			<td>{{ result.registered|number_format }}</td>
                            		</tr>
                        		{% endif %}
                            	{% if result.voters is not null %}
                            		<tr>
                            			<td>{{ "voters"|trans }}</td>
                            			<td>
                            				{% if result.registered is not empty %}
                            			        {{ "percent_and_value"|trans({"%value%": result.voters|number_format, "%percent%": (result.voters*100/result.registered)|number_format(1, null, " ")}) }}
                            			    {% else %}
                            			    	{{ result.voters|number_format }}
                            			   	{% endif %}
        								</td>
                            		</tr>
                        		{% endif %}
                            	{% if result.votesCast is not null %}
                            		<tr>
                            			<td>{{ "votes_cast"|trans }}</td>
                            			<td>{{ result.votesCast|number_format }}</td>
                            		</tr>
                        		{% endif %}
                            	{% if result.blankAndInvalidVotes is not null %}
                            		<tr>
                            			<td>{{ "blank_and_invalid_votes"|trans }}</td>
                            			<td>{{ result.blankAndInvalidVotes|number_format }}</td>
                            		</tr>
                            	{% else %}
                            		{% if result.blankVotes is not null %}
                                		<tr>
                                			<td>{{ "blank_votes"|trans }}</td>
                                			<td>{{ result.blankVotes|number_format }}</td>
                                		</tr>
                            		{% endif %}
                                	{% if result.invalidVotes is not null %}
                                		<tr>
                                			<td>{{ "invalid_votes"|trans }}</td>
                                			<td>{{ result.invalidVotes|number_format }}</td>
                                		</tr>
                            		{% endif %}
                        		{% endif %}
                            	{% if result.abstention is not null %}
                            		<tr>
                            			<td>{{ "abstention"|trans }}</td>
                            			<td>
                            				{% if result.registered is not empty %}
                            			        {{ "percent_and_value"|trans({"%value%": result.abstention|number_format, "%percent%": (result.abstention*100/result.registered)|number_format(1, null, " ")}) }}
                            			    {% else %}
                            			    	{{ result.abstention|number_format }}
                            			   	{% endif %}
                            			</td>
                            		</tr>
                        		{% endif %}
                            </tbody>
                        </table>
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <td>{{ "candidate"|trans }}</td>
                                    <td>{{ "voices"|trans }}</td>
                                    <td>{{ "percentage"|trans }}</td>
                                </tr>
                        	</thead>
                            {% if result.scores.count != 0 %}
                            
                                {% for score in result.scores %}
                                    <tr>
                                        <td>
                                            {{ score.candidacy.candidate.firstname~" "~score.candidacy.candidate.lastname }}
                                            <br/>
                                            <em>{{ score.candidacy.nuance.name }}</em>
                                        </td>
                                        <td>
                                            {{ score.voices|number_format }}
                                        </td>
                                        <td>
                                        	{% if result.votesCast != null %}
                                                {{ (score.voices*100/result.votesCast)|number_format(2, null, " ") }} %
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                            {% else %}
                                {% for candidacy in result.round.candidacies %}
                                    <tr>
                                        <td>
                                            {{ candidacy.candidate.firstname~" "~candidacy.candidate.lastname }}
                                            <br/>
                                            <em>{{ candidacy.nuance.name }}</em>
                                        </td>
                                        <td></td>
                                        <td></td>
                                    </tr>
                                {% endfor %}
                            {% endif %}
                        </table>
                    {% endif %}
        		</div>
        		
                <div class="col-md-6">
                    {% if result != null
                        and result.scores.count > 0 %}
                        <div id="chartRound{{ loop.index }}" style="min-width: 310px; height: 400px; max-width: 600px; margin: 0 auto"></div>
                    {% endif %}
                </div>
			</div>
	    {% endfor %}
    {% endif %}
</div>
{% endblock %}

{% block css %}
{% endblock %}

{% block js %}
<script type="text/javascript">
    {% if election is not null and resultsCity|length > 0 %}
    
        {% set departmentCode = department.dep %}
        {% if departmentCode|number_format < 10 and departmentCode != "2A" and departmentCode != "2B" %}
    		{% set departmentCode = "0" ~ departmentCode %}
        {% endif %}
    	
        $(function() {
    
            // Set map
            var map = L.map('mapid').setView([47.665387356326534, 2.70263671875], 5);
            
            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={{ mapbox_access_token }}', {
                maxZoom: 18,
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                    '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery © <a href="http://mapbox.com">Mapbox</a>',
                id: 'mapbox.light'
            }).addTo(map);
            
            map.attributionControl.addAttribution('{{ "data_copyright"|trans }} <a href="{{ "data_source_website"|trans }}">{{ "data_source_name"|trans }}</a>');
    
            // Prevent the zoom when we scroll the webpage
            map.scrollWheelZoom.disable();
        	
        	
            // Control that shows state info on hover
            var info = L.control();
            
            info.onAdd = function (map) {
        		this._div = L.DomUtil.create('div', 'info');
        		this.update();
        		return this._div;
            };
            
            info.update = function (props) {
            	
        		var name1 = "";
        		var result1 = "";
        		var color1 = "";
        		var name2 = "";
        		var result2 = "";
        		var color2 = "";
        		var area = "";
        		
            	if(props != null) {
        	        {% for result in resultsCity %}


        	    		// TODO Parcourir que les villes du département
            	        {% if result.city.department.id == department.id and result.scores|length > 0 %}
            				if(props.code == '{{ departmentCode ~ result.city.com }}' || props.code == '{{ departmentCode }}0{{ result.city.com }}' || props.code == '{{ departmentCode }}00{{ result.city.com }}') {
                	            {% if result.scores|length > 0 %}
                    				{% if result.votesCast > 0 %}
                						name1 = '{{ result.scores.first.candidacy.candidate.reverseName }}'
                						result1 = "{{ (result.scores.first.voices*100/result.votesCast)|number_format(2) }}"
                						color1 = "{{ result.scores.first.candidacy.nuance.color }}"
                    				{% endif %}
                        			
                	                {% if result.scores|length > 1 and result.votesCast > 0 %}
            							name2 = '{{ result.scores[1].candidacy.candidate.reverseName }}'
            							result2 = "{{ (result.scores[1].voices*100/result.votesCast)|number_format(2) }}"
            							color2 = "{{ result.scores[1].candidacy.nuance.color }}"
                	                {% endif %}
                					area = "{{ result.city.fullName }}"
                	            {% endif %}
            				}
                        {% endif %}
        	        {% endfor %}
        			this._div.style.color = 'black';
        			this._div.style.backgroundColor = 'grey';
        			this._div.style.padding = '0px 10px 5px 10px';
        			this._div.style.borderRadius = '0.5em';
        			this._div.style.backgroundColor = 'white';
        		}
            	else {
        			this._div.style.backgroundColor = 'transparent';
        		}
        		
        	    {% if resultsCity|length != 0 %}
        			this._div.innerHTML = (area ? "<h5>" + area + "</h5>": "") +
        			(props && name1 ?
        			'<strong style="color:' + color1 + ';">' + name1 + '</strong><strong> : ' + result1 + ' %</strong><br />' +
        			'<strong style="color:' + color2 + ';">' + name2 + '</strong> : ' + result2 + ' %'
         			: '&nbsp;');
                {% endif %}
        	};
        	
        	info.addTo(map);
			
        	
            var district_boundary;

            // Set geojson shapes
            
            $.ajax({
                dataType: "json",
                url: "{{ asset("bundles/app/france-geojson/departements/" ~ departmentCode ~ "/communes.geojson") }}",
                success: function(data) {

                    var multipolygon = L.geoJson(data, {
                        style: style, onEachFeature: onEachFeature
                    });

                    district_boundary = multipolygon.addTo(map);
                    map.fitBounds(multipolygon.getBounds());
                }
            });

            // Design layout features
            function onEachFeature(feature, layer) {
                layer.on({
                    mouseover: highlightFeature,
                    mouseout: resetHighlight,
                    click: zoomToFeature
                });
            }

            function resetHighlight(e) {
                district_boundary.resetStyle(e.target);
                info.update();
            }

            function zoomToFeature(e) {
            	var whereToGo = "{{ path("app_election_city_by_code", {"election_id": election.id, "city_code": "XXX", "name": election.urlName}) }}";
                whereToGo = whereToGo.replace("XXX", e.target.feature.properties.code);
                //whereToGo = whereToGo.replace("YYY", e.target.feature.properties.name);
                window.location.href = whereToGo;
            }

            function highlightFeature(e) {
                var layer = e.target;

                layer.setStyle({
                    weight: 4,
                    color: '#fff',
                    dashArray: '',
                    fillOpacity: 0.7
                });

                if (!L.Browser.ie && !L.Browser.opera) {
                    layer.bringToFront();
                }

                info.update(layer.feature.properties);
            }

            function style(feature) {

                return {
                    fillColor: getColor(feature.properties.code),
                    weight: 1,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7
                };
            }

            function getColor(d) {
        	    {% for result in resultsCity %}

    	    	// TODO Parcourir que les villes du département
        	    {% if result.city.department.id == department.id and result.scores|length > 0 %}
        			if(d == '{{ departmentCode ~ result.city.com }}' || d == '{{ departmentCode }}0{{ result.city.com }}' || d == '{{ departmentCode }}00{{ result.city.com }}') {
						
        	            {% if result.scores|length > 0 and result.votesCast > 0 %}
                        	return '{{ result.scores.first.candidacy.nuance.color }}';
                        {% endif %}
                    }
                {% endif %}
            {% endfor %}
            	
                {% if resultsCity|length != 0 %}
                    return 'white';
                {% endif %}
            	
                return 'grey';
            }
        });

    	// Init charts
        {% for result in results %}
        	{% if result != null %}
                $(function () {
                    // Create the chart
                    $('#chartRound{{ loop.index }}').highcharts({
                        chart: {
                            type: 'pie'
                        },
                        title: {
                            text: '{{ "results"|trans }}'
                        },
                        subtitle: {
                            text: '{{ ("round_"~result.round.roundNumber)|trans }}'
                        },
                        plotOptions: {
                            series: {
                                dataLabels: {
                                    enabled: true,
                                    format: '{point.name} : {point.y:.1f} %'
                                }
                            }
                        },
            
                        tooltip: {
                            headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                            pointFormat: '<span style="color:{point.color}">{point.name}</span> : <b>{point.y:.2f}%</b> des voix<br/><span style="font-size:11px"><em>{point.nuance}</em></span><br/>'
                        },
                        series: [{
                            name: '{{ "candidate"|trans }}',
                            colorByPoint: true,
                            data: [
            
                                {% set resultMin = 5 %}
                                {% set smallCandidates = 0 %}
                                {% set totalVoices = 0 %}
                                {% set iScores = 0 %}
            
                                {% for score in result.scores %}

									{% set iScores = iScores + 1 %}
                                    {% set totalVoices = totalVoices + score.voices %}
                                	
                                    {% if (score.voices*100/result.votesCast) >= resultMin or (iScores == result.scores|length and smallCandidates == 0) %}
                                        {
                                        	color: '{{ score.candidacy.nuance.color }}',
                                            name: '{{ score.candidacy.candidate.firstname~" "~score.candidacy.candidate.lastname  }}',
                                            y: {{ (score.voices*100/result.votesCast)|number_format(2, null, " ") }},
                                            nuance: '{{ score.candidacy.nuance.name }}',
                                            drilldown: null
                                        },
                                    {% else %}
                                        {% set smallCandidates = smallCandidates + (score.voices*100/result.votesCast) %}
                                    {% endif %}
                                {% endfor %}

                                {% if totalVoices != result.votesCast %}
                                    {
                                    	color: 'grey',
                                        name: '{{ "various"|trans }}',
                                        y: {{ ((result.votesCast - totalVoices)*100/result.votesCast)|number_format(2, null, " ") }},
                                        drilldown: null
                                    },
                                {% endif %}
            
                                {% if smallCandidates != 0 %}
                                    {
                                        name: '{{ "other_candidates"|trans }}',
                                        y: {{ smallCandidates|number_format(2, null, " ") }},
                                        drilldown: 'other'
                                    },
                                {% endif %}
                            ]
                        }],
                        drilldown: {
                            series: [
                                {% if smallCandidates != 0 %}
                                    {
                                        name: '{{ "other_candidates"|trans }}',
                                        id: 'other',
                                        data: [
                                            {% for score in result.scores %}
                                                {% if (score.voices*100/result.votesCast) < resultMin %}
                                                    {
                                                    	color: '{{ score.candidacy.nuance.color }}',
                                                        name: '{{ score.candidacy.candidate.firstname~" "~score.candidacy.candidate.lastname }}',
                                                        y: {{ (score.voices*100/result.votesCast)|number_format(2, null, " ") }},
                                                        nuance: '{{ score.candidacy.nuance.name }}',
                                                        drilldown: null
                                                    },
                                                {% endif %}
                                            {% endfor %}
                                        ]
                                    },
                                {% endif %}
                            ]
                        }
                    });
                });
			{% endif %}
        {% endfor %}
    {% endif %}
</script>
{% endblock %}
