{% extends "ElectionBundle:Default:design.html.twig" %}

{% block body %}
    <div class="col-md-6">
        {% if department is null %}
            <p>Désolé, aucun département.</p>
        {% elseif results|length == 0 %}
            <h3>{{ department.name }}{% if department.code != '99' %} ({{ department.code }}){% endif %}</h3>
            <p>Désolé, aucun résultat n'a été trouvé pour cette élection.</p>
        {% else %}
            <h3>{{ department.name }}{% if department.code != '99' %} ({{ department.code }}){% endif %}</h3>
            {% for result in results %}
                <h4>{{ result.electionRound.election.name }} ({% if result.electionRound.number == 1 %}1er{% else %}2ème{% endif %} tour)</h4>

                <table class="table">
                    <tr>
                        <td>Inscrits</td>
                        <td>{{ result.registered|number_format(null, null, " ") }}</td>
                    </tr>
                    <tr>
                        <td>Votants</td>
                        <td>{{ result.voters|number_format(null, null, " ") }}</td>
                    </tr>
                    <tr>
                        <td>Participation</td>
                        <td><strong>{{ (result.voters*100/result.registered)|number_format(2, null, " ") }} %</strong></td>
                    </tr>
                    <tr>
                        <td>Votes blancs et nuls</td>
                        <td>{{ result.blankAndInvalidVotes|number_format(null, null, " ") }}</td>
                    </tr>
                    <tr>
                        <td>Suffrages exprimés</td>
                        <td>{{ result.votesCast|number_format(null, null, " ") }}</td>
                    </tr>
                </table>

                <table class="table">
                    <thead>
                    <tr>
                        <td>Candidat(e)</td>
                        <td>Voix</td>
                        <td>Pourcentage</td>
                    </tr>
                    </thead>
                    {% for score in result.scores %}
                        <tr>
                            <td>{{ score.candidate.firstname }} {{ score.candidate.lastname }}</td>
                            <td>{{ score.voices|number_format(null, null, " ") }}</td>
                            <td>
                                {{ (score.voices*100/result.votesCast)|number_format(2, null, " ") }} %
                            </td>
                        </tr>
                    {% endfor %}
                </table>
            {% endfor %}
        {% endif %}
    </div>
    {% if department is not null %}
        <div id="mapid" style="min-width: 310px; height: 500px; max-width: 100%; margin: 0 auto"></div>
    {% endif %}
{% endblock %}

{% block js %}
    {% if department is not null %}
        // Set map
        var map = L.map('mapid').setView([47.665387356326534, 2.70263671875], 6);

        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={{ twig_mapbox_access_token }}', {
            maxZoom: 18,
            attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery © <a href="http://mapbox.com">Mapbox</a>',
            id: 'mapbox.light'
        }).addTo(map);

        // control that shows state info on hover
        var info = L.control();

        info.onAdd = function (map) {
            this._div = L.DomUtil.create('div', 'info');
            this.update();
            return this._div;
        };

        info.update = function (props) {

            var name1 = ""
            var result1 = ""
            var name2 = ""
            var result2 = ""
            var area = ""

            {% for mapResult in mapResults %}
                {% set townCode = mapResult.town.department.code %}

                {% if mapResult.town.code|length == 1 %}
                    {% set townCode = townCode ~ "00" %}
                {% elseif mapResult.town.code|length == 2 %}
                    {% set townCode = townCode ~ "0" %}
                {% endif %}

                {% set townCode = townCode ~ mapResult.town.code %}

                {% if mapResult.scores|length > 0 %}
                    if(props != null && props.code == '{{ townCode }}') {
                        area = "{{ mapResult.town.name }}"

                        {% if mapResult.votesCast == 0 %}
                            name1 = "Pas de voix exprimées."
                            name2 = ""
                            result1 = ""
                            result2 = ""
                        {% else %}
                            name1 = '{{ mapResult.scores.first.candidate.name }}'
                            result1 = "{{ (mapResult.scores.first.voices*100/mapResult.votesCast)|number_format(2, null, " ") }} %"

                            {% if mapResult.scores|length > 1 %}
                                name2 = '{{ mapResult.scores[1].candidate.name }}'
                                result2 = "{{ (mapResult.scores[1].voices*100/mapResult.votesCast)|number_format(2, null, " ") }} %"
                            {% endif %}
                        {% endif %}
                    }
                {% endif %}
            {% endfor %}

            {% if mapResults|length > 0 %}
                this._div.innerHTML = '<h4>{{ mapResults[0].electionRound.election.name }} {% if mapResults[0].electionRound.number == 1 %}1er{% else %}2ème{% endif %} tour</h4>' +
                    (area ? "<h5>" + area + "</h5>": "") +
                        (props ?
                        '<strong>' + name1 + '</strong><br />' + result1 + '<br />' +
                        '<strong>' + name2 + '</strong><br />' + result2
                        : 'Passez la souris sur la carte.');
            {% endif %}
        };

        info.addTo(map);



        // Set areas

        function getColor(d) {

            {% for mapResult in mapResults %}
                {% set townCode = mapResult.town.department.code %}

                {% if mapResult.town.code|length == 1 %}
                    {% set townCode = townCode ~ "00" %}
                {% elseif mapResult.town.code|length == 2 %}
                    {% set townCode = townCode ~ "0" %}
                {% endif %}

                {% set townCode = townCode ~ mapResult.town.code %}

                if(d == '{{ townCode }}') {
                    {% if mapResult.scores|length > 0 and mapResult.votesCast > 0 %}
                        return '{{ mapResult.scores.first.candidate.politicalNuance.color }}';
                    {% endif %}
                }
            {% endfor %}

            return 'white';
        }

        function style(feature) {

            return {
                fillColor: getColor(feature.properties.code),
                weight: 1,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }

        function highlightFeature(e) {
            var layer = e.target;

            layer.setStyle({
                weight: 4,
                color: '#fff',
                dashArray: '',
                fillOpacity: 0.7
            });

            if (!L.Browser.ie && !L.Browser.opera) {
                layer.bringToFront();
            }

            info.update(layer.feature.properties);
        }

        var district_boundary;
        function resetHighlight(e) {
            district_boundary.resetStyle(e.target);
            info.update();
        }

        function zoomToFeature(e) {
            //map.fitBounds(e.target.getBounds());

            {% if mapResults|length > 0 %}
                var whereToGo = "{{ path("election_town", {"id": mapResults[0].electionRound.election.id, "code": "XXX"}) }}";
                whereToGo = whereToGo.replace("XXX", e.target.feature.properties.code)
                window.location.href = whereToGo;
            {% endif %}
        }

        function onEachFeature(feature, layer) {
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }

        map.attributionControl.addAttribution('Données &copy; <a href="http://data.gouv.fr/">Data.gouv.fr</a>');

        var legend = L.control({position: 'bottomright'});

        legend.onAdd = function (map) {

            var div = L.DomUtil.create('div', 'info legend'),
            grades = [],
            labels = [];

            // loop through our density intervals and generate a label with a colored square for each interval
            {% if mapResults|length > 0 %}
                {% for candidate in mapCandidatesList %}
                    div.innerHTML += '<i style="background:{{ candidate.politicalNuance.color }}">&nbsp;&nbsp;&nbsp;&nbsp;</i>&nbsp;';

                    div.innerHTML += "{{ candidate.name }}<br>";
                {% endfor %}
            {% endif %}

            return div;
        };

        legend.addTo(map);

        {% set geoJsonFile = "bundles/election/geojson/departments/" ~ department.code ~ "/communes.geojson" %}

        $.ajax({
            dataType: "json",
            url: "{{ asset(geoJsonFile) }}",
            success: function(data) {

                var multipolygon = L.geoJson(data, {
                    style: style, onEachFeature: onEachFeature
                });

                district_boundary = multipolygon.addTo(map);
                map.fitBounds(multipolygon.getBounds());
            }
        }).error(function() {});
    {% endif %}
{% endblock %}