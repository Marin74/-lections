{% extends "ElectionBundle:Default:design.html.twig" %}

{% block body %}
    <div id="mapid" style="min-width: 310px; height: 500px; max-width: 100%; margin: 0 auto"></div>
    <!-- Main component for a primary marketing message or call to action -->
    <div class="jumbotron">
        <h2>Rechercher</h2>
        <form method="post" action="{{ url("election_search") }}">
            <p>
                <input type="text" class="form-control" placeholder="Rechercher un territoire (commune, département...)" name="search">
            </p>
        </form>
    </div>
{% endblock %}
{% block css %}
    <script>
        .info {
            padding: 6px 8px;
            font: 14px/16px Arial, Helvetica, sans-serif;
            background: white;
            background: rgba(255,255,255,0.8);
            box-shadow: 0 0 15px rgba(0,0,0,0.2);
            border-radius: 5px;
        }
        .info h4 {
            margin: 0 0 5px;
            color: #777;
        }

        .legend {
            line-height: 18px;
            color: #555;
        }
        .legend i {
            width: 18px;
            height: 18px;
            float: left;
            margin-right: 8px;
            opacity: 0.7;
        }
    </script>
{% endblock %}
{% block js %}
    // Set map
    var map = L.map('mapid').setView([47.665387356326534, 2.70263671875], 6);

    L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={{ twig_mapbox_access_token }}', {
        maxZoom: 18,
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
        '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
        'Imagery © <a href="http://mapbox.com">Mapbox</a>',
        id: 'mapbox.light'
    }).addTo(map);


    // TODO
    // control that shows state info on hover
    var info = L.control();

    info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info');
    this.update();
    return this._div;
    };

    info.update = function (props) {

    var name1 = ""
    var result1 = ""
    var name2 = ""
    var result2 = ""
    var department = ""
    {% for mapResult in mapResults %}
        if(props != null && (props.code == '{{ mapResult.department.code }}' || props.code == '0{{ mapResult.department.code }}')) {
            {% if mapResult.scores|length > 0 %}
                name1 = '{{ mapResult.scores.first.candidate.name }}'
                result1 = "{{ (mapResult.scores.first.voices*100/mapResult.votesCast)|number_format(2, null, " ") }}"
                name2 = '{{ mapResult.scores[1].candidate.name }}'
                result2 = "{{ (mapResult.scores[1].voices*100/mapResult.votesCast)|number_format(2, null, " ") }}"
                department = "{{ mapResult.department.name }}"
            {% endif %}
        }
    {% endfor %}

    this._div.innerHTML = '<h4>{{ mapResults[0].electionRound.election.name }} {% if mapResults[0].electionRound.number == 1 %}1er{% else %}2ème{% endif %} tour</h4>' +
    (department ? "<h5>" + department + "</h5>": "") +
    (props ?
    '<strong>' + name1 + '</strong><br />' + result1 + ' %<br />' +
    '<strong>' + name2 + '</strong><br />' + result2 + ' %'
    : 'Passez la souris sur la carte.');
    };

    info.addTo(map);
    // TODO



    // Set departments areas
    //var district_boundary = new L.geoJson();
    //district_boundary.addTo(map);


    function getColor(d) {

        {% for mapResult in mapResults %}
            if(d == '{{ mapResult.department.code }}' || d == '0{{ mapResult.department.code }}') {
            {% if mapResult.scores|length > 0 %}
                return '{{ mapResult.scores.first.candidate.politicalNuance.color }}';
            {% endif %}
            }
        {% endfor %}
        return 'white';

        /*return d > 100 ? '#800026' :
        d > 90  ? '#BD0026' :
        d > 80  ? '#E31A1C' :
        d > 60  ? '#FC4E2A' :
        d > 40   ? '#FD8D3C' :
        d > 20   ? '#FEB24C' :
        d > 10   ? '#FED976' :
        '#FFEDA0';*/
    }

    function style(feature) {

        return {
            fillColor: getColor(feature.properties.code),
            weight: 1,
            opacity: 1,
            color: 'white',
            dashArray: '3',
            fillOpacity: 0.7
        };
    }




    // TODO
    function highlightFeature(e) {
    var layer = e.target;

    layer.setStyle({
    weight: 4,
    color: '#fff',
    dashArray: '',
    fillOpacity: 0.7
    });

    if (!L.Browser.ie && !L.Browser.opera) {
    layer.bringToFront();
    }

    info.update(layer.feature.properties);
    }

    //var geojson;
var district_boundary;
    function resetHighlight(e) {
    district_boundary.resetStyle(e.target);
    info.update();
    }

    function zoomToFeature(e) {
        //map.fitBounds(e.target.getBounds());
        var whereToGo = "{{ path("election_department", {"id": mapResults[0].electionRound.election.id, "code": "XXX"}) }}";
        whereToGo = whereToGo.replace("XXX", e.target.feature.properties.code)
        window.location.href = whereToGo;
    }

    function onEachFeature(feature, layer) {
    layer.on({
    mouseover: highlightFeature,
    mouseout: resetHighlight,
    click: zoomToFeature
    });
    }

    /*district_boundary = L.geoJson(statesData, {
    style: style,
    onEachFeature: onEachFeature
    }).addTo(map);*/

    map.attributionControl.addAttribution('Données &copy; <a href="http://data.gouv.fr/">Data.gouv.fr</a>');


    var legend = L.control({position: 'bottomright'});

    legend.onAdd = function (map) {

    var div = L.DomUtil.create('div', 'info legend'),
    grades = [0, 10, 20, 50, 100, 200, 500, 1000],
    labels = [];

    // loop through our density intervals and generate a label with a colored square for each interval
    {% for candidate in mapResults[0].electionRound.candidates %}
        div.innerHTML += '<i style="background:{{ candidate.politicalNuance.color }}">&nbsp;&nbsp;&nbsp;&nbsp;</i>&nbsp;';

        div.innerHTML += "{{ candidate.name }}<br>";
    {% endfor %}

    return div;
    };

    legend.addTo(map);
    // TODO



    //var district_boundary = new L.geoJson();
    //district_boundary.addTo(map);
    $.ajax({
    dataType: "json",
    url: "{{ asset("bundles/election/geojson/departments.geojson") }}",
    success: function(data) {

    district_boundary = L.geoJson(data, {
    style: style, onEachFeature: onEachFeature
    }).addTo(map);
    }
    }).error(function() {});

    /*var myLayer = L.geoJson(false, {
    onEachFeature: onEachFeature
    }).addTo(map);

    myLayer.addData(geojsonFeature);*/

{% endblock %}